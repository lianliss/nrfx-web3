const logger = require('../utils/logger');
const _ = require('lodash');
const db = require('./db');
const {getService} = require('../services/networks');
const errors = require('./error');

class Wallet {
    constructor(data) {
        this.data = data;

        if (!this.service) {
            this.service = getService(data.network);
        }
    }
    data = {};

    /**
     * Save this wallet to data base
     */
    save = async () => db.setUserWallet(this.data);

    /**
     * Create a new wallet in BEP20 network and save it to user
     * @param userID
     * @param network
     * @returns {Promise.<*>} - will return a new wallet
     */
    static create = async (userID, network = 'BEP20') => {
        try {
            const service = getService(network);
            const account = await service.createAccount();
            const key = account.mnemonic || account.privateKey;
            const data = {
                userID,
                address: account.address,
                encryption: service.encrypt(key, userID),
                isGenerated: true,
                network,
                service,
            };
            const wallet = new Wallet(data);
            await wallet.save();
            return wallet;
        } catch (error) {
            logger.error('[Wallet][create]', error);
        }
    };

    /**
     * Import address as wallet. User can only receive tokens to this wallet
     * @param userID {int}
     * @param address {string} - wallet address
     * @param network {string} - wallet network (optional) Default: 'BEP20'
     * @returns {Promise.<Wallet>} - new wallet
     */
    static importAddress = async (userID, address, network = 'BEP20') => {
        const wallet = new Wallet({
            userID, address, network,
        });
        await wallet.save();
        return wallet;
    };

    /**
     * Import wallet with full functionality as generated by our service
     * @param userID
     * @param key
     * @param network {string} - wallet network (optional) Default: 'BEP20'
     * @returns {Promise.<*>}
     */
    static importPrivateKey = async (userID, key, network = 'BEP20') => {
        try {
            const service = getService(network);
            const processedKey = network === 'BEP20' ? key : key.split(' ');
            const account = await service.getAccount(processedKey);
            const data = {
                userID,
                address: account.address,
                privateData: service.encrypt(processedKey, userID),
                isGenerated: true,
                network,
                service,
            };
            const wallet = new Wallet(data);
            await wallet.save();
            return wallet;
        } catch (error) {
            logger.error('[Wallet][importPrivateKey]', error);
            return;
        }
    };

    /**
     * Returns current wallet private key if it exits
     * @returns {*}
     */
    getPrivateKey = () => {
        const {userID} = this.data;

        const key = this.data.encryption || this.data.privateData;
        logger.debug('getPrivateKey', key, this.data);
        if (!userID || !key) return false;

        const account = this.service.decrypt(key, userID);
        logger.debug('account', account);
        if (account && (account.privateKey || account.length)) {
            return account.privateKey ? account.privateKey : account.join(' ');
        } else {
            return false;
        }
    };

    /**
     * Returns wallet balances
     * @returns {Promise.<*>}
     */
    getBalances = async () => {
        try {
            const { address} = this.data;

            return await this.service.getBalances(address);
        } catch (error) {
            logger.error('[Wallet][getBalances]', this.network, error);
            return {};
        }
    };

    /**
     * Returns this wallet account if this wallet is generated by us
     */
    getAccount = async () => {
        const key = this.getPrivateKey();
        if (!key) throw new errors.NotNarfexWalletError();
        return await this.service.getAccount(key);
    };

    /**
     * Transfer token to another wallet
     * @param recipient {string} - receiver wallet address
     * @param token {string} - token symbol
     * @param amount {number} - amount of tokens
     * @returns {Promise.<void>}
     */
    transfer = async (recipient, token, amount) => {
        try {
            const account = await this.getAccount();
            await this.service.transfer(recipient, token, amount, undefined, account);
        } catch (error) {
            logger.error('[Wallet][transfer]', this.data.userID, this.data.network, token, amount, error);
            throw error;
        }
    };
}

module.exports = Wallet;
