const logger = require('../utils/logger');
const _ = require('lodash');
const db = require('./db');
const web3Service = require('../services/web3');
const errors = require('./error');

class Wallet {
    constructor(data) {
        this.data = data;
    }
    data = {};

    /**
     * Save this wallet to data base
     */
    save = async () => db.setUserWallet(this.data);

    /**
     * Create a new wallet in BEP20 network and save it to user
     * @param userID
     * @returns {Promise.<*>} - will return a new wallet
     */
    static create = async userID => {
        try {
            const account = web3Service.createAccount();
            const data = {
                userID,
                address: account.address,
                privateData: web3Service.encryptPrivateKey(account.privateKey, userID),
                isGenerated: true,
                network: 'BEP20',
            };
            const wallet = new Wallet(data);
            await wallet.save();
            return wallet;
        } catch (error) {
            logger.error('[Wallet][create]', error);
        }
    };

    /**
     * Import address as wallet. User can only receive tokens to this wallet
     * @param userID {int}
     * @param address {string} - wallet address
     * @param network {string} - wallet network (optional) Default: 'BEP20'
     * @returns {Promise.<Wallet>} - new wallet
     */
    static importAddress = async (userID, address, network = 'BEP20') => {
        const wallet = new Wallet({
            userID, address, network,
        });
        await wallet.save();
        return wallet;
    };

    /**
     * Import wallet with full functionality as generated by our service
     * @param userID
     * @param privateKey {string}
     * @param network {string} - wallet network (optional) Default: 'BEP20'
     * @returns {Promise.<*>}
     */
    static importPrivateKey = async (userID, privateKey, network = 'BEP20') => {
        try {
            const account = web3Service.getAccount(privateKey);
            const data = {
                userID,
                address: account.address,
                privateData: web3Service.encryptPrivateKey(account.privateKey, userID),
                isGenerated: true,
                network,
            };
            const wallet = new Wallet(data);
            await wallet.save();
            return wallet;
        } catch (error) {
            logger.error('[Wallet][importPrivateKey]', error);
            return;
        }
    };

    /**
     * Returns current wallet private key if it exits
     * @returns {*}
     */
    getPrivateKey = () => {
        const {userID, privateData} = this.data;
        if (!userID || !privateData) return false;
        const account = web3Service.decryptPrivateKey(privateData, userID);
        if (account && account.privateKey) {
            return account.privateKey;
        } else {
            return false;
        }
    };

    /**
     * Returns wallet balances
     * @returns {Promise.<*>}
     */
    getBalances = async () => {
        try {
            return await web3Service.getBalances(this.data.address);
        } catch (error) {
            logger.error('[Wallet][getBalances]', error);
            return {};
        }
    };

    /**
     * Returns this wallet account if this wallet is generated by us
     */
    getAccount = () => {
        const privateKey = this.getPrivateKey();
        if (!privateKey) throw new errors.NotNarfexWalletError();
        return web3Service.getAccount(privateKey);
    };

    /**
     * Transfer token to another wallet
     * @param recipient {string} - receiver wallet address
     * @param token {string} - token symbol
     * @param amount {number} - amount of tokens
     * @returns {Promise.<void>}
     */
    transfer = async (recipient, token, amount) => {
        try {
            const account = this.getAccount();
            await web3Service.transfer(recipient, token, amount, undefined, account);
        } catch (error) {
            logger.error('[Wallet][transfer]', this.data.userID, token, amount, error);
            throw error;
        }
    };
}

module.exports = Wallet;
